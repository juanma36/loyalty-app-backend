#!/bin/bash

# Script de despliegue automatizado a AWS para Loyalty App Backend
# Autor: Sistema de Despliegue Automatizado
# Versi√≥n: 1.0

set -e  # Salir si hay alg√∫n error

# =============================================================================
# CONFIGURACI√ìN - MODIFICA ESTAS VARIABLES SEG√öN TU SETUP
# =============================================================================

# Informaci√≥n de tu instancia EC2
EC2_IP="TU_IP_PUBLICA_AQUI"  # Ejemplo: 18.188.123.45
PEM_FILE="TU_ARCHIVO_PEM_AQUI"  # Ejemplo: loyalty-app-key.pem
PROJECT_NAME="loyalty-app-backend"

# Configuraci√≥n opcional
SSH_USER="ec2-user"
SSH_PORT="22"
APP_PORT="3000"

# =============================================================================
# FUNCIONES DE UTILIDAD
# =============================================================================

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Funci√≥n para imprimir mensajes con colores
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}================================${NC}"
    echo -e "${PURPLE}$1${NC}"
    echo -e "${PURPLE}================================${NC}"
}

# Funci√≥n para verificar si un comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Funci√≥n para validar configuraci√≥n
validate_config() {
    print_header "Validando Configuraci√≥n"
    
    if [ "$EC2_IP" = "TU_IP_PUBLICA_AQUI" ] || [ -z "$EC2_IP" ]; then
        print_error "‚ùå Debes configurar EC2_IP en el script"
        exit 1
    fi
    
    if [ "$PEM_FILE" = "TU_ARCHIVO_PEM_AQUI" ] || [ -z "$PEM_FILE" ]; then
        print_error "‚ùå Debes configurar PEM_FILE en el script"
        exit 1
    fi
    
    if [ ! -f "$PEM_FILE" ]; then
        print_error "‚ùå El archivo PEM no existe: $PEM_FILE"
        exit 1
    fi
    
    # Verificar que el archivo PEM tenga los permisos correctos
    if [ "$(stat -c %a "$PEM_FILE" 2>/dev/null || stat -f %Lp "$PEM_FILE" 2>/dev/null)" != "600" ]; then
        print_warning "‚ö†Ô∏è  Configurando permisos del archivo PEM..."
        chmod 600 "$PEM_FILE"
    fi
    
    print_success "‚úÖ Configuraci√≥n validada correctamente"
}

# Funci√≥n para verificar conectividad
check_connectivity() {
    print_header "Verificando Conectividad"
    
    print_status "üîç Probando conexi√≥n SSH a $EC2_IP..."
    if ssh -i "$PEM_FILE" -o ConnectTimeout=10 -o BatchMode=yes "$SSH_USER@$EC2_IP" exit 2>/dev/null; then
        print_success "‚úÖ Conexi√≥n SSH exitosa"
    else
        print_error "‚ùå No se puede conectar a la instancia EC2"
        print_error "   Verifica:"
        print_error "   - La IP p√∫blica es correcta"
        print_error "   - El archivo PEM es v√°lido"
        print_error "   - El Security Group permite SSH (puerto 22)"
        exit 1
    fi
}

# Funci√≥n para crear backup
create_backup() {
    print_header "Creando Backup"
    
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    BACKUP_FILE="${PROJECT_NAME}_backup_${TIMESTAMP}.tar.gz"
    
    print_status "üì¶ Creando backup del c√≥digo actual..."
    tar -czf "$BACKUP_FILE" --exclude=node_modules --exclude=.git --exclude=*.tar.gz .
    
    if [ $? -eq 0 ]; then
        print_success "‚úÖ Backup creado: $BACKUP_FILE"
    else
        print_error "‚ùå Error creando backup"
        exit 1
    fi
}

# Funci√≥n para preparar archivo de despliegue
prepare_deployment() {
    print_header "Preparando Archivo de Despliegue"
    
    print_status "üì¶ Creando archivo tar para despliegue..."
    tar -czf "${PROJECT_NAME}.tar.gz" --exclude=node_modules --exclude=.git --exclude=*.tar.gz .
    
    if [ $? -eq 0 ]; then
        print_success "‚úÖ Archivo de despliegue creado: ${PROJECT_NAME}.tar.gz"
        
        # Mostrar tama√±o del archivo
        FILE_SIZE=$(du -h "${PROJECT_NAME}.tar.gz" | cut -f1)
        print_status "üìä Tama√±o del archivo: $FILE_SIZE"
    else
        print_error "‚ùå Error creando archivo de despliegue"
        exit 1
    fi
}

# Funci√≥n para subir archivo a EC2
upload_to_ec2() {
    print_header "Subiendo Archivo a EC2"
    
    print_status "üì§ Subiendo ${PROJECT_NAME}.tar.gz a $EC2_IP..."
    scp -i "$PEM_FILE" -o ConnectTimeout=30 "${PROJECT_NAME}.tar.gz" "$SSH_USER@$EC2_IP:~/"
    
    if [ $? -eq 0 ]; then
        print_success "‚úÖ Archivo subido exitosamente"
    else
        print_error "‚ùå Error subiendo archivo a EC2"
        exit 1
    fi
}

# Funci√≥n para ejecutar despliegue en EC2
deploy_on_ec2() {
    print_header "Ejecutando Despliegue en EC2"
    
    print_status "üîß Ejecutando script de despliegue en la instancia..."
    
    ssh -i "$PEM_FILE" "$SSH_USER@$EC2_IP" << 'EOF'
        set -e
        
        echo "üìÅ Extrayendo archivo..."
        tar -xzf loyalty-app-backend.tar.gz
        
        echo "üìÇ Navegando al directorio..."
        cd loyalty-app-backend
        
        echo "üîß Configurando permisos..."
        chmod +x deploy-ec2.sh
        
        echo "üöÄ Ejecutando script de despliegue..."
        ./deploy-ec2.sh
        
        echo "‚úÖ Despliegue completado en EC2"
        
        # Verificar que la aplicaci√≥n est√© ejecut√°ndose
        echo "üîç Verificando estado de la aplicaci√≥n..."
        sleep 10
        
        if sudo docker ps | grep -q loyalty-app-backend; then
            echo "‚úÖ Contenedor ejecut√°ndose correctamente"
        else
            echo "‚ùå El contenedor no est√° ejecut√°ndose"
            exit 1
        fi
EOF
    
    if [ $? -eq 0 ]; then
        print_success "‚úÖ Despliegue en EC2 completado exitosamente"
    else
        print_error "‚ùå Error durante el despliegue en EC2"
        exit 1
    fi
}

# Funci√≥n para verificar despliegue
verify_deployment() {
    print_header "Verificando Despliegue"
    
    print_status "üîç Verificando que la aplicaci√≥n est√© ejecut√°ndose..."
    
    # Verificar contenedor
    if ssh -i "$PEM_FILE" "$SSH_USER@$EC2_IP" "sudo docker ps | grep -q loyalty-app-backend"; then
        print_success "‚úÖ Contenedor ejecut√°ndose"
    else
        print_error "‚ùå El contenedor no est√° ejecut√°ndose"
        return 1
    fi
    
    # Verificar endpoint de salud
    print_status "üè• Probando endpoint de salud..."
    sleep 5
    
    if curl -s -f "http://$EC2_IP:$APP_PORT/health" > /dev/null; then
        print_success "‚úÖ Endpoint de salud respondiendo"
    else
        print_warning "‚ö†Ô∏è  Endpoint de salud no responde (puede tardar en iniciar)"
    fi
    
    # Mostrar informaci√≥n de la aplicaci√≥n
    print_status "üìä Informaci√≥n de la aplicaci√≥n:"
    echo -e "${CYAN}   üåê URL: http://$EC2_IP:$APP_PORT${NC}"
    echo -e "${CYAN}   üìö API Docs: http://$EC2_IP:$APP_PORT/api-docs${NC}"
    echo -e "${CYAN}   üè• Health: http://$EC2_IP:$APP_PORT/health${NC}"
}

# Funci√≥n para limpiar archivos temporales
cleanup() {
    print_header "Limpieza"
    
    print_status "üßπ Eliminando archivos temporales..."
    rm -f "${PROJECT_NAME}.tar.gz"
    print_success "‚úÖ Archivos temporales eliminados"
}

# Funci√≥n para mostrar comandos √∫tiles
show_useful_commands() {
    print_header "Comandos √ötiles"
    
    echo -e "${CYAN}üìù Ver logs en tiempo real:${NC}"
    echo "   ssh -i \"$PEM_FILE\" $SSH_USER@$EC2_IP \"sudo docker-compose -f docker-compose.prod.yml logs -f\""
    echo ""
    
    echo -e "${CYAN}üîç Ver estado de contenedores:${NC}"
    echo "   ssh -i \"$PEM_FILE\" $SSH_USER@$EC2_IP \"sudo docker ps\""
    echo ""
    
    echo -e "${CYAN}üîÑ Reiniciar aplicaci√≥n:${NC}"
    echo "   ssh -i \"$PEM_FILE\" $SSH_USER@$EC2_IP \"sudo docker-compose -f docker-compose.prod.yml restart\""
    echo ""
    
    echo -e "${CYAN}üõë Detener aplicaci√≥n:${NC}"
    echo "   ssh -i \"$PEM_FILE\" $SSH_USER@$EC2_IP \"sudo docker-compose -f docker-compose.prod.yml down\""
    echo ""
    
    echo -e "${CYAN}üè• Probar endpoint de salud:${NC}"
    echo "   curl http://$EC2_IP:$APP_PORT/health"
    echo ""
}

# =============================================================================
# FUNCI√ìN PRINCIPAL
# =============================================================================

main() {
    print_header "üöÄ DESPLIEGUE AUTOMATIZADO - LOYALTY APP BACKEND"
    
    # Verificar que estemos en el directorio correcto
    if [ ! -f "package.json" ] || [ ! -f "deploy.sh" ]; then
        print_error "‚ùå Este script debe ejecutarse desde el directorio ra√≠z del proyecto"
        exit 1
    fi
    
    # Verificar dependencias
    if ! command_exists tar; then
        print_error "‚ùå El comando 'tar' no est√° disponible"
        exit 1
    fi
    
    if ! command_exists scp; then
        print_error "‚ùå El comando 'scp' no est√° disponible"
        exit 1
    fi
    
    if ! command_exists ssh; then
        print_error "‚ùå El comando 'ssh' no est√° disponible"
        exit 1
    fi
    
    # Ejecutar pasos del despliegue
    validate_config
    check_connectivity
    create_backup
    prepare_deployment
    upload_to_ec2
    deploy_on_ec2
    verify_deployment
    cleanup
    
    print_header "üéâ ¬°DESPLIEGUE COMPLETADO EXITOSAMENTE!"
    print_success "Tu aplicaci√≥n est√° ahora ejecut√°ndose en AWS"
    
    show_useful_commands
    
    print_header "üìä RESUMEN"
    echo -e "${GREEN}‚úÖ Backup creado${NC}"
    echo -e "${GREEN}‚úÖ Archivo subido a EC2${NC}"
    echo -e "${GREEN}‚úÖ Aplicaci√≥n desplegada${NC}"
    echo -e "${GREEN}‚úÖ Verificaci√≥n completada${NC}"
    echo ""
    echo -e "${YELLOW}üåê Tu aplicaci√≥n est√° disponible en: http://$EC2_IP:$APP_PORT${NC}"
}

# =============================================================================
# EJECUCI√ìN
# =============================================================================

# Capturar interrupciones para limpiar archivos temporales
trap 'print_error "‚ùå Despliegue interrumpido"; rm -f "${PROJECT_NAME}.tar.gz"; exit 1' INT TERM

# Ejecutar funci√≥n principal
main "$@" 